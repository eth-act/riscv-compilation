use ark_bn254::Fr;
use ark_ec::{PrimeGroup, pairing::Pairing};
use ark_ff::{Field, PrimeField};
use std::str::FromStr;
pub use ark_bn254::Bn254;

pub fn init_rands_arks_batched() -> Vec<Fr> {
    [
        "11925306884671639711286078138552788811649604663196974537020480912285369738271",
        "88849426861914636591308620293461513299638685374374639770584085916697620534211",
        // "90156464879906423420141375331945112957831236578301905531577964820873568691600",
        // "92690705584896734742193127948672608776693918682004773680393292478935561916584",
        // "60130855252737854244213637030674814274565325941378535316634207966615452030758",
        // "76434600423490772848293973264802940562572589189904049796388440218691831775852",
        // "35610283675518434327629023461238020839843837606419714185096721142894139231234",
        // "39862034522265598011070622732035617438506238892085821087934785329843049850727",
        // "18496504303578913538354094934065725018983092674122823651022089862838762212071",
        // "47386445220260477282930797238134602007768974849827401344652316208547427405242",
        // "32375793778569801576387569320678922451818277540841348921591203504789409812390",
        // "94856223717670899968254813892764804883640115206385008029598061337682076805318",
        // "89076023496753964728214806379814075378122912479386149661084298450871320459874",
        // "13249258034315305280736241564786546933097255615907705175596737691857612357918",
        // "16213496319784698738110740235120622236827450340978943678902175765896457998062",
        // "39118724015806095891327359016779473210686349016840497970867326312836910500528",
        // "79720587133590138548294139025389057983516066748083280391846349623500890620354",
        // "20130764522105187483042874942630198271279984675059418039220394021179389427897",
        // "17686467089738770517858965802309282413601037956406200793587289600375901384673",
        // "36240505843574990836206383680757024241613482594798329818369039630134605432889",
    ]
    .iter()
    .map(|x| Fr::from_str(x).unwrap())
    .collect()
}

pub fn perform_20_bn254_pairings_arks<P: Pairing>() {
    let rands = init_rands_arks_batched();

    for rand in rands {
        // Generate private keys
        let alice_sk = rand;
        let bob_sk = rand + Fr::ONE;
        let carol_sk = bob_sk + Fr::ONE;

        // Generate public keys in G1 and G2
        let (alice_pk1, alice_pk2) = (
            P::G1::generator().mul_bigint(alice_sk.into_bigint()),
            P::G2::generator().mul_bigint(alice_sk.into_bigint()),
        );
        let (bob_pk1, bob_pk2) = (
            P::G1::generator().mul_bigint(bob_sk.into_bigint()),
            P::G2::generator().mul_bigint(bob_sk.into_bigint()),
        );
        let (carol_pk1, carol_pk2) = (
            P::G1::generator().mul_bigint(carol_sk.into_bigint()),
            P::G2::generator().mul_bigint(carol_sk.into_bigint()),
        );

        // Each party computes the shared secret
        let alice_ss = P::pairing(bob_pk1, carol_pk2).mul_bigint(alice_sk.into_bigint());
        let bob_ss = P::pairing(carol_pk1, alice_pk2).mul_bigint(bob_sk.into_bigint());
        let carol_ss = P::pairing(alice_pk1, bob_pk2).mul_bigint(carol_sk.into_bigint());

        assert!(alice_ss == bob_ss && bob_ss == carol_ss);
    }
}

#[cfg(test)]
mod tests {
    use ark_bn254::Bn254;

    use super::*;

    #[test]
    fn test_perform_20_bn254_pairings_arks() {
        perform_20_bn254_pairings_arks::<Bn254>();
    }
}
